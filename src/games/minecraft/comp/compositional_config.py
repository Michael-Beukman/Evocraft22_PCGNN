
import base64
import json
import numpy as np
from games.minecraft.blocks import STONE
from games.minecraft.comp.compositional_shared import get_game_network, make_x

"""
Hey, note:
- House size must be even
- RR must be smaller or equal to HOUSE_SIZE
"""

HOUSE_SIZE   = 6                     # Size of house
HOUSE_HEIGHT = 6                    # Height of house
ROOF_HEIGHT = 4                    # Height of roof
X = 10 * HOUSE_SIZE                 # How big the town (i.e. 20 tiles now)
Y = 30                              # HEIGHT of the town -- Can effectively ignore it
Z = X
RR = 4                              # By how many tiles each side should the roofs overhang


# Options
config = {
    # All these are only valid if the town has multiple house types. If not, set these to false
    'USE_DIFFERENT_ROOF_MATERIALS'      : True,     # If true, use different roof materials for the different house types
    'USE_DIFFERENT_HOUSE_MATERIALS'     : True,     # If true, use different house materials for the different house types
    'USE_DIFFERENT_HOUSE_HEIGHTS'       : True,     # Each house type will have a different height
}

# Different generators -- should <artifact> always be generated by the same network, or different ones. If this is 1, only one network is used (best one). If this is N, N networks will be used.
HOW_MANY_HOUSE_NETS_TO_USE          = 1
HOW_MANY_DECORATION_NETS_TO_USE     = 3
HOW_MANY_ROOF_NETS_TO_USE           = 1
HOW_MANY_GARDEN_NETS_TO_USE         = 20

# Versions to use -- These are the versions of the separate artifacts. Look in the python files with these versions to see what letters are optional.
TOWN_VERSION_TO_USE         = '755_towns_d'
HOUSE_NETS_TO_USE           = '754_houses_g'
ROOF_NETS_TO_USE            = '753_roofs_d'
GARDEN_NETS_TO_USE          = '712_matthewb'
DECORATION_NETS_TO_USE      = '752_decorations_j'

print("CONFIG = ", json.dumps(dict(
    HOUSE_SIZE=HOUSE_SIZE,
    HOUSE_HEIGHT=HOUSE_HEIGHT,
    ROOF_HEIGHT=ROOF_HEIGHT,
    X=X,
    Y=Y,
    Z=Z,
    RR=RR,
    config=config,
    HOW_MANY_HOUSE_NETS_TO_USE=HOW_MANY_HOUSE_NETS_TO_USE,
    HOW_MANY_DECORATION_NETS_TO_USE=HOW_MANY_DECORATION_NETS_TO_USE,
    HOW_MANY_ROOF_NETS_TO_USE=HOW_MANY_ROOF_NETS_TO_USE,
    HOW_MANY_GARDEN_NETS_TO_USE=HOW_MANY_GARDEN_NETS_TO_USE,
    TOWN_VERSION_TO_USE=TOWN_VERSION_TO_USE,
    HOUSE_NETS_TO_USE=HOUSE_NETS_TO_USE,
    ROOF_NETS_TO_USE=ROOF_NETS_TO_USE,
    GARDEN_NETS_TO_USE=GARDEN_NETS_TO_USE,
    DECORATION_NETS_TO_USE=DECORATION_NETS_TO_USE,
))
)


# ==============================================================================================================================
#                                                   DO NOT CHANGE BELOW HERE
# ==============================================================================================================================
TILE_X = HOUSE_SIZE
ROOF_SIZE = HOUSE_SIZE + RR * 2
DECORATION_SIZE = HOUSE_SIZE -2
TILE_Z = HOUSE_SIZE

assert RR <= HOUSE_SIZE, "RR Must be smaller or equal to HOUSE_SIZE"
assert HOUSE_SIZE % 2 == 0, "HOUSE_SIZE must be divisible by 2"
_temp = (3 if config['USE_DIFFERENT_HOUSE_HEIGHTS'] else 1)
assert HOUSE_HEIGHT * _temp < Y, f"Y must be larger than HOUSE_HEIGHT * {_temp}"


# Change these
generators = {
    'town' : get_game_network(TOWN_VERSION_TO_USE, X // HOUSE_SIZE, X // HOUSE_SIZE, 1, config=config),
    'house': get_game_network(HOUSE_NETS_TO_USE, HOUSE_SIZE, HOUSE_SIZE, HOUSE_HEIGHT, HOW_MANY_HOUSE_NETS_TO_USE, config=config),
    'roof': get_game_network(ROOF_NETS_TO_USE, ROOF_SIZE, ROOF_SIZE, ROOF_HEIGHT, HOW_MANY_ROOF_NETS_TO_USE, config=config),
    'garden': get_game_network(GARDEN_NETS_TO_USE, HOUSE_SIZE, HOUSE_SIZE, 1, HOW_MANY_GARDEN_NETS_TO_USE, config=config),
    'decoration': get_game_network(DECORATION_NETS_TO_USE, DECORATION_SIZE, DECORATION_SIZE, HOUSE_HEIGHT - 2, HOW_MANY_DECORATION_NETS_TO_USE, config=config)
}

all_generators = [
    {
        'town' : get_game_network(TOWN_VERSION_TO_USE, X // HOUSE_SIZE, X // HOUSE_SIZE, 1, config=config, seed=seed),
        'house': get_game_network(HOUSE_NETS_TO_USE, HOUSE_SIZE, HOUSE_SIZE, HOUSE_HEIGHT, HOW_MANY_HOUSE_NETS_TO_USE, config=config, seed=seed),
        'roof': get_game_network(ROOF_NETS_TO_USE, ROOF_SIZE, ROOF_SIZE, ROOF_HEIGHT, HOW_MANY_ROOF_NETS_TO_USE, config=config, seed=seed),
        'garden': get_game_network(GARDEN_NETS_TO_USE, HOUSE_SIZE, HOUSE_SIZE, 1, HOW_MANY_GARDEN_NETS_TO_USE, config=config, seed=seed),
        'decoration': get_game_network(DECORATION_NETS_TO_USE, DECORATION_SIZE, DECORATION_SIZE, HOUSE_HEIGHT - 2, HOW_MANY_DECORATION_NETS_TO_USE, config=config, seed=seed)
    } for seed in range(5)
    ]




def create_function(name):
    return lambda i: make_x(name, i, generators=generators)

if len(generators['town']['game'].level.tile_types) == 4:
    mapping = {
        0: create_function('garden'),
        1: create_function('house'),
        2: create_function('garden'),
        3: lambda i: temp(i, STONE),
    }
    
    
    if any(config.values()):
        raise Exception("Hey! You have tried to use different houses with a town that supports only one type of house! Set the values in the config dictionary to false!")
    
else:
    mapping = {
        0: create_function('garden'),
        1: create_function('house'),
        2: create_function('house'),
        3: create_function('house'),
        4: create_function('garden'),
        5: lambda i: temp(i, STONE),
    }

def temp(i, B):
    return np.ones((HOUSE_SIZE, 1, HOUSE_SIZE)) * B
